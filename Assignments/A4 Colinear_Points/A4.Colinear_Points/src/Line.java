import java.util.ArrayList;import java.util.Collection;import java.util.TreeSet;import java.util.Iterator;/** * Line.java * Models a line segment as a Set of Points. * * The import statements offer a strong suggestion of what set * implementation to use: java.util.TreeSet. This isn't required, * but it's a good choice. * * @author   Mark Gallagher (mag0038@tigermail.auburn.edu) * @author   Dean Hendrix (dh@auburn.edu) * @version  2014-09-23 * */public class Line implements Comparable<Line>, Iterable<Point> {    private TreeSet<Point> points;    // create a new line with no points    public Line() {        points = new TreeSet<Point>();    }    // create a new line with all distinct collinear points in c    public Line(Collection<Point> c) {        this();        if(c.size() > 0) {            ArrayList<Point> temp = new ArrayList<Point>(c);            Iterator<Point> itr = temp.iterator();            Point p1 = itr.next();            Point p2 = null;            points.add(p1);            if (itr.hasNext()) {                p2 = itr.next();                points.add(p2);            }            while (itr.hasNext()) {                Point p = itr.next();                if (p.slopeTo(p1) == p.slopeTo(p2)) {                    points.add(p);                }            }        }    }    // add p to this line if distinct and collinear    public boolean add(Point p) {        if (points.isEmpty() || p.slopeTo(points.first()) == p.slopeTo(points.last())) {            return points.add(p);        }        return false;    }    // return the first point on this line    public Point first() {        if (points.isEmpty()) return null;        return points.first();    }    // return the last point on this line    public Point last() {        if (points.isEmpty()) return null;        return points.last();    }    // return the number of points on this line    public int length() {        return points.size();    }    private boolean isEmpty() {        return this.points.isEmpty();    }    // compare this point to that point    @Override    public int compareTo(Line that) {        if (that == null || this.isEmpty() || that.isEmpty()) {            throw new IllegalArgumentException("Argument null or empty!");        }        int result = this.first().compareTo(that.first());        if (result == 0) {            result = this.last().compareTo(that.last());        }        return result;    }    // provide an iterator over all the points on this line    @Override    public Iterator<Point> iterator() {        return points.iterator();    }    // return this line as a String    @Override    public String toString() {        String result = "";        for (Point p : points) {            result += p.toString();            if (p != points.last()) {                result += " -> ";            }        }        return result;    }}